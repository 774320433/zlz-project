http://www.cnblogs.com/tugenhua0707/p/5198407.html
Javascript常用的设计模式

1.理解工厂模式
    var BicycleShop = function () {
    };
    BicycleShop.prototype = {
        constructor: BicycleShop,
        /*
         * 买自行车这个方法
         * @param {model} 自行车型号
         */
        sellBicycle: function (model) {
            var bicycle = this.createBicycle(mode);
            // 执行A业务逻辑
            bicycle.A();

            // 执行B业务逻辑
            bicycle.B();

            return bicycle;
        },
        createBicycle: function (model) {
            throw new Error("父类是抽象类不能直接调用，需要子类重写该方法");
        }
    };
    // 实现原型继承
    function extend(Sub, Sup) {
        //Sub表示子类，Sup表示超类
        // 首先定义一个空函数
        var F = function () {
        };

        // 设置空函数的原型为超类的原型
        F.prototype = Sup.prototype;

        // 实例化空函数，并把超类原型引用传递给子类
        Sub.prototype = new F();

        // 重置子类原型的构造器为子类自身
        Sub.prototype.constructor = Sub;

        // 在子类中保存超类的原型,避免子类与超类耦合
        Sub.sup = Sup.prototype;

        if (Sup.prototype.constructor === Object.prototype.constructor) {
            // 检测超类原型的构造器是否为原型自身
            Sup.prototype.constructor = Sup;
        }
    }

    var BicycleChild = function (name) {
        this.name = name;
    // 继承构造函数父类中的属性和方法
        BicycleShop.call(this, name);
    };
    // 子类继承父类原型方法
    extend(BicycleChild, BicycleShop);
    // BicycleChild 子类重写父类的方法
    BicycleChild.prototype.createBicycle = function () {
        var A = function () {
            console.log("执行A业务操作");
        };
        var B = function () {
            console.log("执行B业务操作");
        };
        return {
            A: A,
            B: B
        }
    }
    var childClass = new BicycleChild("龙恩");
    console.log(childClass);

2.理解单体模式
3.理解模块模式
4.理解代理模式
5.理解职责链模式
6.命令模式的理解
7.模块方法模式
8.理解javascript中的策略模式
9.Javascript中理解发布--订阅模式
10.理解中介者模式